db-uri = "postgres://user:pass@localhost:5432/dbname"
  db-schema = "public" # this schema gets added to the search_path of every request
  db-anon-role = "postgres"
  db-pool = 10
  db-pool-timeout = 10

  name="PostgREST"
  description="RESTful API for any PostgreSQL database."
  logo="https://avatars2.githubusercontent.com/u/15115011"
  repository="https://github.com/PostgREST/postgrest"
  env="{
    "BUILDPACK_URL": {
      "description": "Heroku buildpack for deploying Haskell applications",
      "value": "https://github.com/PostgREST/postgrest-heroku"
    },
    "POSTGREST_VER": {
      "description": "Version of PostgREST to deploy",
      "value": "7.0.1"
    },
    "DB_URI": {
      "description": "Database connection string, e.g. postgres://user:pass@xxxxxxx.rds.amazonaws.com/mydb",
      "required": true
    },
    "DB_SCHEMA": {
      "description": "The database schema to expose to REST clients. Tables, views and stored procedures in this schema will get API endpoints",
      "required": true,
      "value": "public"
    },
    "DB_ANON_ROLE": {
      "description": "The database role to use when executing commands on behalf of unauthenticated clients",
      "required": true
    },
    "DB_POOL": {
      "description": "Number of connections to keep open in PostgRESTâ€™s database pool",
      "required": false,
      "value": "10"
    },
    "SERVER_PROXY_URI": {
      "description": "Overrides the base URL used within the OpenAPI self-documentation hosted at the API root path",
      "required": false
    },
    "JWT_SECRET": {
      "description": "The secret used to decode JWT tokens clients provide for authentication",
      "required": false
    },
    "SECRET_IS_BASE64": {
      "description": "When this is set to true, the value derived from jwt-secret will be treated as a base64 encoded secret",
      "required": false,
      "value": "false"
    },
    "JWT_AUD": {
      "description": "The audience that should be validated if the JWT token contains an aud claim",
      "required": false
    },
    "MAX_ROWS": {
      "description": "A hard limit to the number of rows PostgREST will fetch from a view, table, or stored procedure",
      "required": false
    },
    "PRE_REQUEST": {
      "description": "A schema-qualified stored procedure name to call right after switching roles for a client request",
      "required": false
    }
  }"
  server-host = "!4"
  server-port = 3000

  ## unix socket location
  ## if specified it takes precedence over server-port
  # server-unix-socket = "/tmp/pgrst.sock"
  ## unix socket file mode
  ## when none is provided, 660 is applied by default
  # server-unix-socket-mode = "660"

  ## base url for swagger output
  # openapi-server-proxy-uri = ""

  ## choose a secret, JSON Web Key (or set) to enable JWT auth
  ## (use "@filename" to load from separate file)
  # jwt-secret = "secret_with_at_least_32_characters"
  # secret-is-base64 = false
  # jwt-aud = "your_audience_claim"

  ## limit rows in response
  # max-rows = 1000

  ## stored proc to exec immediately after auth
  # pre-request = "stored_proc_name"

  ## jspath to the role claim key
  # role-claim-key = ".role"

  ## extra schemas to add to the search_path of every request
  # db-extra-search-path = "extensions, util"

  ## stored proc that overrides the root "/" spec
  ## it must be inside the db-schema
  # root-spec = "stored_proc_name"

  ## content types to produce raw output
  # raw-media-types="image/png, image/jpg"
